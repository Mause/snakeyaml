// line 1 "RagelMachine.rl"
/*
 * See LICENSE file in distribution for copyright and licensing information.
 */
package org.yaml.snakeyaml.resolver;
//Source for Ragel 6.3

/**
 * Generated by Ragel 6.3 (http://www.complang.org/ragel/)
 * @see http://www.complang.org/ragel/
 */
public class RagelMachine {
    // line 48 "RagelMachine.rl"

    
    
// line 18 "RagelMachine.java"
private static byte[] init__snakeyaml_actions_0()
{
	return new byte [] {
	    0,    1,    0,    1,    1,    1,    2,    1,    3,    1,    4,    1,
	    5,    1,    6
	};
}

private static final byte _snakeyaml_actions[] = init__snakeyaml_actions_0();


private static short[] init__snakeyaml_key_offsets_0()
{
	return new short [] {
	    0,    0,   20,   24,   28,   30,   32,   34,   35,   36,   37,   42,
	   46,   50,   52,   56,   59,   67,   71,   75,   81,   83,   84,   85,
	   86,   88,   90,   91,   93,   95,  101,  106,  111,  112,  114,  115,
	  116,  117,  118,  119,  120,  124,  125,  126,  127,  128,  132,  133,
	  134,  136,  137,  138,  140,  141,  142,  143,  145,  147,  148,  149,
	  149,  154,  156,  156,  165,  172,  178,  181,  189,  194,  198,  200,
	  205,  208,  209,  218,  225,  232,  240,  240,  245,  250,  255,  261,
	  261,  261
	};
}

private static final short _snakeyaml_key_offsets[] = init__snakeyaml_key_offsets_0();


private static char[] init__snakeyaml_trans_keys_0()
{
	return new char [] {
	   32,   43,   45,   46,   48,   60,   61,   70,   78,   79,   84,   89,
	  102,  110,  111,  116,  121,  126,   49,   57,   46,   48,   49,   57,
	   73,  105,   48,   57,   43,   45,   48,   57,   78,  110,   70,  102,
	  110,   46,   58,   95,   48,   57,   48,   53,   54,   57,   46,   58,
	   48,   57,   46,   58,   46,   95,   48,   57,   95,   48,   49,   44,
	   95,   48,   57,   65,   70,   97,  102,   48,   53,   54,   57,   48,
	   53,   54,   57,   73,   78,  105,  110,   48,   57,   65,   97,   78,
	   97,  110,   48,   57,   48,   57,   45,   48,   57,   48,   57,   45,
	   46,   58,   95,   48,   57,   46,   58,   95,   48,   57,   46,   58,
	   95,   48,   57,   60,   65,   97,   76,   83,   69,  108,  115,  101,
	   79,   85,  111,  117,   76,   76,  108,  108,   70,   78,  102,  110,
	   70,  102,   82,  114,   85,  117,   69,  101,   83,  115,   97,  111,
	  117,  102,  110,  114,  101,   69,   95,  101,   48,   57,   48,   57,
	   46,   58,   95,   98,  120,   48,   55,   56,   57,   46,   58,   95,
	   48,   55,   56,   57,   46,   95,   48,   55,   56,   57,   95,   48,
	   49,   44,   95,   48,   57,   65,   70,   97,  102,   46,   58,   95,
	   48,   57,   46,   58,   48,   57,   46,   58,   46,   58,   95,   48,
	   57,   58,   48,   57,   58,   46,   58,   95,   98,  120,   48,   55,
	   56,   57,   46,   58,   95,   48,   55,   56,   57,   46,   58,   95,
	   48,   55,   56,   57,   45,   46,   58,   95,   48,   55,   56,   57,
	   46,   58,   95,   48,   57,   46,   58,   95,   48,   57,   46,   58,
	   95,   48,   57,   45,   46,   58,   95,   48,   57,    0
	};
}

private static final char _snakeyaml_trans_keys[] = init__snakeyaml_trans_keys_0();


private static byte[] init__snakeyaml_single_lengths_0()
{
	return new byte [] {
	    0,   18,    2,    2,    2,    0,    2,    1,    1,    1,    3,    0,
	    2,    2,    2,    1,    2,    0,    0,    4,    2,    1,    1,    1,
	    0,    0,    1,    0,    0,    4,    3,    3,    1,    2,    1,    1,
	    1,    1,    1,    1,    4,    1,    1,    1,    1,    4,    1,    1,
	    2,    1,    1,    2,    1,    1,    1,    2,    2,    1,    1,    0,
	    3,    0,    0,    5,    3,    2,    1,    2,    3,    2,    2,    3,
	    1,    1,    5,    3,    3,    4,    0,    3,    3,    3,    4,    0,
	    0,    0
	};
}

private static final byte _snakeyaml_single_lengths[] = init__snakeyaml_single_lengths_0();


private static byte[] init__snakeyaml_range_lengths_0()
{
	return new byte [] {
	    0,    1,    1,    1,    0,    1,    0,    0,    0,    0,    1,    2,
	    1,    0,    1,    1,    3,    2,    2,    1,    0,    0,    0,    0,
	    1,    1,    0,    1,    1,    1,    1,    1,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    1,    1,    0,    2,    2,    2,    1,    3,    1,    1,    0,    1,
	    1,    0,    2,    2,    2,    2,    0,    1,    1,    1,    1,    0,
	    0,    0
	};
}

private static final byte _snakeyaml_range_lengths[] = init__snakeyaml_range_lengths_0();


private static short[] init__snakeyaml_index_offsets_0()
{
	return new short [] {
	    0,    0,   20,   24,   28,   31,   33,   36,   38,   40,   42,   47,
	   50,   54,   57,   61,   64,   70,   73,   76,   82,   85,   87,   89,
	   91,   93,   95,   97,   99,  101,  107,  112,  117,  119,  122,  124,
	  126,  128,  130,  132,  134,  139,  141,  143,  145,  147,  152,  154,
	  156,  159,  161,  163,  166,  168,  170,  172,  175,  178,  180,  182,
	  183,  188,  190,  191,  199,  205,  210,  213,  219,  224,  228,  231,
	  236,  239,  241,  249,  255,  261,  268,  269,  274,  279,  284,  290,
	  291,  292
	};
}

private static final short _snakeyaml_index_offsets[] = init__snakeyaml_index_offsets_0();


private static byte[] init__snakeyaml_indicies_0()
{
	return new byte [] {
	    0,    2,    2,    3,    4,    6,    7,    8,    9,   10,   11,   12,
	   13,   14,   15,   16,   17,    0,    5,    1,   18,   19,   20,    1,
	   22,   23,   21,    1,   24,   24,    1,   25,    1,   26,   27,    1,
	   28,    1,   28,    1,   27,    1,   21,   30,   31,   29,    1,   32,
	   33,    1,   25,   30,   33,    1,   25,   30,    1,   21,   31,   31,
	    1,   34,   34,    1,   35,   35,   35,   35,   35,    1,   36,   37,
	    1,   38,   39,    1,   22,   40,   23,   41,   21,    1,   42,   42,
	    1,   28,    1,   43,    1,   28,    1,   44,    1,   45,    1,   46,
	    1,   47,    1,   48,    1,   49,   21,   30,   31,   29,    1,   21,
	   30,   31,   50,    1,   21,   30,   31,   51,    1,   52,    1,   53,
	   54,    1,   55,    1,   56,    1,   57,    1,   58,    1,   59,    1,
	   57,    1,   57,   60,   57,   61,    1,   62,    1,    0,    1,   63,
	    1,    0,    1,   64,   57,   65,   57,    1,   57,    1,   57,    1,
	   66,   67,    1,   56,    1,   59,    1,   68,   69,    1,   57,    1,
	   57,    1,   54,    1,   57,   61,    1,   65,   57,    1,   67,    1,
	   69,    1,    1,   70,   21,   70,   21,    1,   25,    1,    1,   21,
	   30,   72,   73,   74,   71,   29,    1,   21,   30,   72,   71,   29,
	    1,   21,   72,   72,   31,    1,   34,   34,    1,   35,   35,   35,
	   35,   35,    1,   21,   75,   76,   20,    1,   25,   75,   37,    1,
	   25,   75,    1,   21,   77,   76,   76,    1,   77,   39,    1,   77,
	    1,   21,   30,   72,   73,   74,   78,   79,    1,   21,   30,   72,
	   80,   51,    1,   21,   30,   72,   81,   50,    1,   49,   21,   30,
	   72,   71,   29,    1,    1,   21,   75,   76,   82,    1,   21,   75,
	   76,   83,    1,   21,   75,   76,   84,    1,   49,   21,   75,   76,
	   20,    1,    1,    1,    1,    0
	};
}

private static final byte _snakeyaml_indicies[] = init__snakeyaml_indicies_0();


private static byte[] init__snakeyaml_trans_targs_0()
{
	return new byte [] {
	   59,    0,    2,   19,   74,   79,   32,   84,   33,   40,   45,   48,
	   51,   54,   55,   56,   57,   58,    3,   63,   68,   60,    6,    9,
	    5,   61,    7,    8,   62,   10,   11,   14,   12,   13,   66,   67,
	   69,   70,   72,   73,   20,   22,   21,   23,   25,   26,   27,   28,
	   78,   24,   29,   30,   83,   34,   37,   35,   36,   85,   38,   39,
	   41,   43,   42,   44,   46,   47,   49,   50,   52,   53,    4,   64,
	   65,   15,   16,   17,   71,   18,   75,   31,   76,   77,   80,   81,
	   82
	};
}

private static final byte _snakeyaml_trans_targs[] = init__snakeyaml_trans_targs_0();


private static byte[] init__snakeyaml_trans_actions_0()
{
	return new byte [] {
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0
	};
}

private static final byte _snakeyaml_trans_actions[] = init__snakeyaml_trans_actions_0();


private static byte[] init__snakeyaml_eof_actions_0()
{
	return new byte [] {
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    5,
	   11,   11,   11,    9,    9,    9,    9,    9,    9,    9,    9,    9,
	    9,    9,    9,    9,    9,    9,   13,    9,    9,    9,    9,    3,
	    7,    1
	};
}

private static final byte _snakeyaml_eof_actions[] = init__snakeyaml_eof_actions_0();


static final int snakeyaml_start = 1;
static final int snakeyaml_error = 0;

static final int snakeyaml_en_main = 1;

// line 51 "RagelMachine.rl"

    public String scan(String scalar) {
        if (scalar == null) {
            throw new NullPointerException("Scalar must be provided");
        }
        String tag = null;
        int cs = 0;
        int p = 0;
        int pe = scalar.length();
        int eof = pe;
        char[] data;
        if (pe == 0) {
            // NULL value
            data = new char[] { '~' };
            pe = 1;
        } else {
            data = scalar.toCharArray();
        }
        
// line 239 "RagelMachine.java"
	{
	cs = snakeyaml_start;
	}

// line 244 "RagelMachine.java"
	{
	int _klen;
	int _trans = 0;
	int _keys;
	int _goto_targ = 0;

	_goto: while (true) {
	switch ( _goto_targ ) {
	case 0:
	if ( p == pe ) {
		_goto_targ = 4;
		continue _goto;
	}
	if ( cs == 0 ) {
		_goto_targ = 5;
		continue _goto;
	}
case 1:
	_match: do {
	_keys = _snakeyaml_key_offsets[cs];
	_trans = _snakeyaml_index_offsets[cs];
	_klen = _snakeyaml_single_lengths[cs];
	if ( _klen > 0 ) {
		int _lower = _keys;
		int _mid;
		int _upper = _keys + _klen - 1;
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( data[p] < _snakeyaml_trans_keys[_mid] )
				_upper = _mid - 1;
			else if ( data[p] > _snakeyaml_trans_keys[_mid] )
				_lower = _mid + 1;
			else {
				_trans += (_mid - _keys);
				break _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _snakeyaml_range_lengths[cs];
	if ( _klen > 0 ) {
		int _lower = _keys;
		int _mid;
		int _upper = _keys + (_klen<<1) - 2;
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( data[p] < _snakeyaml_trans_keys[_mid] )
				_upper = _mid - 2;
			else if ( data[p] > _snakeyaml_trans_keys[_mid+1] )
				_lower = _mid + 2;
			else {
				_trans += ((_mid - _keys)>>1);
				break _match;
			}
		}
		_trans += _klen;
	}
	} while (false);

	_trans = _snakeyaml_indicies[_trans];
	cs = _snakeyaml_trans_targs[_trans];

case 2:
	if ( cs == 0 ) {
		_goto_targ = 5;
		continue _goto;
	}
	if ( ++p != pe ) {
		_goto_targ = 1;
		continue _goto;
	}
case 4:
	if ( p == eof )
	{
	int __acts = _snakeyaml_eof_actions[cs];
	int __nacts = (int) _snakeyaml_actions[__acts++];
	while ( __nacts-- > 0 ) {
		switch ( _snakeyaml_actions[__acts++] ) {
	case 0:
// line 14 "RagelMachine.rl"
	{ tag = "tag:yaml.org,2002:bool"; }
	break;
	case 1:
// line 15 "RagelMachine.rl"
	{ tag = "tag:yaml.org,2002:merge"; }
	break;
	case 2:
// line 16 "RagelMachine.rl"
	{ tag = "tag:yaml.org,2002:null"; }
	break;
	case 3:
// line 17 "RagelMachine.rl"
	{ tag = "tag:yaml.org,2002:value"; }
	break;
	case 4:
// line 18 "RagelMachine.rl"
	{ tag = "tag:yaml.org,2002:int"; }
	break;
	case 5:
// line 19 "RagelMachine.rl"
	{ tag = "tag:yaml.org,2002:float"; }
	break;
	case 6:
// line 20 "RagelMachine.rl"
	{ tag = "tag:yaml.org,2002:timestamp"; }
	break;
// line 359 "RagelMachine.java"
		}
	}
	}

case 5:
	}
	break; }
	}
// line 73 "RagelMachine.rl"


        return tag;
    }
}